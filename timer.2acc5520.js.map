{"version":3,"sources":["partials/timer.js"],"names":["dateInput","document","getElementById","startBtn","querySelector","daysContainer","hoursContainer","minutesContainer","secondsContainer","currentDate","Date","now","addEventListener","onInput","onClick","countdownDate","value","diff","convertMs","days","hours","minutes","seconds","innerHTML","disabled","timerId","setInterval","clearInterval","toString","padStart","console","log","ms","Math","floor","hour","minute","second"],"mappings":";AAAA,MAAMA,EAAYC,SAASC,eAAe,iBACpCC,EAAWF,SAASG,cAAc,gBAClCC,EAAgBJ,SAASG,cAAc,eACvCE,EAAiBL,SAASG,cAAc,gBACxCG,EAAmBN,SAASG,cAAc,kBAC1CI,EAAmBP,SAASG,cAAc,kBAC1CK,EAAc,IAAIC,KAAKA,KAAKC,OAClCX,EAAUY,iBAAiB,QAASC,GACpCV,EAASS,iBAAiB,QAASE,GACnC,MAAMC,EAAgB,IAAIL,KAAKV,EAAUgB,OAEzC,SAASH,IACDI,MAAAA,EAAOC,EAAUH,EAAgBN,GACnCQ,EAAKE,MACJF,EAAKG,OACLH,EAAKI,SACLJ,EAAKK,SAAW,IACnBjB,EAAckB,UAAY,EAC1BjB,EAAeiB,UAAY,EAC3BhB,EAAiBgB,UAAY,EAC7Bf,EAAiBe,UAAY,EAC7BpB,EAASqB,UAAW,GAGxB,SAASV,IACDW,MAAAA,EAAUC,YAAY,KACpBX,MAAAA,EAAgB,IAAIL,KAAKV,EAAUgB,OACnCP,EAAc,IAAIC,KAAKA,KAAKC,OAC5BM,EAAOC,EAAUH,EAAgBN,GACnCQ,EAAKE,MACJF,EAAKG,OACLH,EAAKI,SACLJ,EAAKK,SAAW,GACnBjB,EAAckB,UAAY,EAC1BjB,EAAeiB,UAAY,EAC3BhB,EAAiBgB,UAAY,EAC7Bf,EAAiBe,UAAY,EAC7BI,cAAcF,KAEdpB,EAAckB,UAAYN,EAAKE,KAAKS,WAAWC,SAAS,EAAG,KAC3DvB,EAAeiB,UAAYN,EAAKG,MAAMQ,WAAWC,SAAS,EAAG,KAC7DtB,EAAiBgB,UAAYN,EAAKI,QAAQO,WAAWC,SAAS,EAAG,KACjErB,EAAiBe,UAAYN,EAAKK,QAAQM,WAAWC,SAAS,EAAG,MAEnEC,QAAQC,IAAId,GACZa,QAAQC,IAAIhB,GACZe,QAAQC,IAAItB,IACX,KAGL,SAASS,EAAUc,GAgBV,MAAA,CAAEb,KARIc,KAAKC,MAAMF,EAHZG,OAWGf,MANDa,KAAKC,MAAOF,EALdG,MADCC,MAYSf,QAJNY,KAAKC,MAAQF,EAPjBG,MADCC,KADEC,KAagBf,QAFfW,KAAKC,MAASF,EATlBG,MADCC,KADEC,IADA","file":"timer.2acc5520.js","sourceRoot":"../src","sourcesContent":["const dateInput = document.getElementById('date-selector');\nconst startBtn = document.querySelector('[data-start]');\nconst daysContainer = document.querySelector('[data-days]');\nconst hoursContainer = document.querySelector('[data-hours]');\nconst minutesContainer = document.querySelector('[data-minutes]');\nconst secondsContainer = document.querySelector('[data-seconds]');\nconst currentDate = new Date(Date.now());\ndateInput.addEventListener('input', onInput);\nstartBtn.addEventListener('click', onClick);\nconst countdownDate = new Date(dateInput.value);\n\nfunction onInput() {\n  const diff = convertMs(countdownDate - currentDate);\n  if (diff.days\n    && diff.hours\n    && diff.minutes\n    && diff.seconds <= 0) {\n    daysContainer.innerHTML = 00;\n    hoursContainer.innerHTML = 00;\n    minutesContainer.innerHTML = 00;\n    secondsContainer.innerHTML = 00;\n    startBtn.disabled = true;\n  }\n}\nfunction onClick() {\n  const timerId = setInterval(() => {\n    const countdownDate = new Date(dateInput.value);\n    const currentDate = new Date(Date.now());\n    const diff = convertMs(countdownDate - currentDate);\n    if (diff.days\n      && diff.hours\n      && diff.minutes\n      && diff.seconds <= 0) {\n      daysContainer.innerHTML = 00;\n      hoursContainer.innerHTML = 00;\n      minutesContainer.innerHTML = 00;\n      secondsContainer.innerHTML = 00;\n      clearInterval(timerId);\n    } else {\n      daysContainer.innerHTML = diff.days.toString().padStart(2, \"0\");\n      hoursContainer.innerHTML = diff.hours.toString().padStart(2, \"0\");\n      minutesContainer.innerHTML = diff.minutes.toString().padStart(2, \"0\");\n      secondsContainer.innerHTML = diff.seconds.toString().padStart(2, \"0\");\n    };\n    console.log(diff);\n    console.log(countdownDate);\n    console.log(currentDate);\n  }, 1000);\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n// console.log(convertMs(24140000));\n// class CountdownTimer {\n//   constructor({ selector, targetDate }) {\n//     this.selector = selector;\n//     this.finalDate = targetDate;\n//     this.date = currentDate\n//     this.time = targetDate - currentDate;\n//   }\n// };\n// const currentDate = Date.parse(new Date());\n// new CountdownTimer({\n//   selector: '#timer-1',\n//   targetDate: new Date('Jul 17, 2019'),\n// });\n// console.log(CountdownTimer);\n// //time - різниця між targetDate і поточною датою\n// /*\n//  * Дні, що залишилися: ділимо значення UTC на 1000 * 60 * 60 * 24, кількість\n//  * мілісекунд в один день (мілісекунди * секунди * хвилини * години)\n//  */\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\n\n// /*\n//  * Решта годин: отримуємо залишок від попереднього розрахунку за допомогою оператора\n//  * залишку% і ділимо його на кількість мілісекунд в одній годині\n//  * (1000 * 60 * 60 = мілісекунди * хвилини * секунди)\n//  */\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n// /*\n//  * Решта хвилин: отримуємо хвилини, що залишилися і ділимо їх на кількість\n//  * мілісекунд в одній хвилині (1000 * 60 = мілісекунди * секунди)\n//  */\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n\n// /*\n//  * Решта секунд: отримуємо секунди, які залишилися і ділимо їх на кількість\n//  * миллисекунд в одной секунде (1000)\n//  */\n// const secs = Math.floor((time % (1000 * 60)) / 1000);\n\n// days = days < 10 ? \"0\" + days : days;\n// hours = hours < 10 ? \"0\" + hours : hours;\n// minutes = minutes < 10 ? \"0\" + minutes : minutes;\n// seconds = seconds < 10 ? \"0\" + seconds : seconds;"]}